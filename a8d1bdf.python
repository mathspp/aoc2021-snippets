from functools import reduce

FOLD_LINE_PREFIX = "fold along "

def fold_points(points, fold):  # <- Accepts pointS (plural) and the whole fold.
    coord, value = fold
    vx = int(value) if coord == "x" else float("+inf")
    vy = int(value) if coord == "y" else float("+inf")
    return {
        (x if x < vx else 2 * vx - x, y if y < vy else 2 * vy - y)
        for x, y in points
    }

with open(INPUT_FILE, "r") as f:
    data = f.read()

# Split point data from fold data.
point_data, fold_data = data.split("\n\n")
points = [tuple(map(int, point.split(","))) for point in point_data.splitlines()]
# Parse all folds now:
folds = [
    fold.removeprefix(FOLD_LINE_PREFIX).split("=")
    for fold in fold_data.splitlines()
]

folded = reduce(fold_points, folds, points)

# Create a "canvas" to paint the final result on.
width = 1 + max(x for x, _ in folded)
height = 1 + max(y for _, y in folded)
canvas = [
    # Character u2588 is a nice full box, see
    # https://en.wikipedia.org/wiki/Box-drawing_character#Block_Elements
    ["\u2588" if (x, y) in folded else " " for x in range(width)]
    for y in range(height)
]
print("\n".join("".join(row) for row in canvas))
